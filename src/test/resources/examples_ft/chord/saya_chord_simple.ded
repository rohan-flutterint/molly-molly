//simplified chord?

nodes("a", "c")@1;
nodes("c", "a")@1;
nodes("b", "c")@1;
nodes("c", "b")@1;

pred("a", "a", "c")@1;
pred("a", "c", "a")@1;
pred("c", "a", "c")@1;
pred("c", "c", "a")@1;
pred("b", "c", "a")@1;

suc("a", "c")@1;
suc("c", "a")@1;

val("a", "a", 1)@1;
val("a", "c", 3)@1;
val("c", "a", 1)@1;
val("c", "c", 3)@1;
val("b", "c", 3)@1;
val("b", "a", 1)@1;
val("b", "b", 2)@1;
val("a", "b", 2)@1;

//runtime
join("b","c")@1;
a_stab("a")@6;

//permanence
nodes(A, B)@next :- nodes(A, B);
pred(A, B, C)@next :- pred(A, B, C), notin oldpred(A, B, C);
suc(A, B)@next :- suc(A, B), notin oldsuc(A, B);
val(A, B, C)@next :- val(A, B, C);
oldsuc(A, B)@next :- oldsuc(A, B);
oldpred(A, B, C)@next :- oldpred(A, B, C);

//join
newsuc(B, C)@next :- join(B, C), val(B, B, Bval), val(B, C, Cval), Bval < Cval, pred(B, C, Cpred), val(B, Cpred, Cpredval), Cpredval < Bval;
suc(B,C) :- newsuc(B, C);
//notify
notify(C, B, Bval)@async :- newsuc(B, C), val(B, B, Bval);
newpred(C, B, Cpred)@next :- notify(C, B, Bval), pred(C, C, Cpred), val(C, Cpred, Cpredval), Cpredval < Bval;

oldpred(C, C, Cpred) :- newpred(C, B, Cpred);
pred(C, C, B) :- newpred(C, B, Cpred);
pred(A, C, B)@async :- newpred(C, B, Cpred), nodes(C, A);
oldpred(A, C, Cpred)@async :- newpred(C, B, Cpred), nodes(C, A);
//stabilize
changesuc(A, Asucpred, Asuc)@next :- a_stab(A), suc(A, Asuc), pred(A, Asuc, Asucpred), val(A, A, Aval), val(A, Asucpred, Asucpredval), Aval < Asucpredval; 
oldsuc(A, Asuc) :- changesuc(A, Asucpred, Asuc);
newsuc(A, Asucpred) :- changesuc(A, Asucpred, Asuc);


pred(C, B, A)@async :- notify(B, A, Aval), nodes(B, C), notin pred(_, B, _);
