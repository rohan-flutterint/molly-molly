//Initial knowledge
//node("d", 40)@1;

nodes("a", "a")@1;
nodes("b", "b")@1;
nodes("a", "b")@1;
nodes("b", "a")@1;
nodes("c", "a")@1;
nodes("c", "b")@1;
nodes("a", "c")@1;
nodes("b", "c")@1;
nodes("c", "c")@1;
nodes("d", "d")@1;
nodes("d", "a")@1;
nodes("d", "a")@1;
nodes("d", "b")@1;
nodes("d", "c")@1;
nodes("d", "d")@1;
nodes("a", "d")@1;
nodes("b", "d")@1;
nodes("c", "d")@1;
nodes("a", "e")@1;
nodes("b", "e")@1;
nodes("c", "e")@1;
nodes("d", "e")@1;
nodes("e", "e")@1;
nodes("f", "e")@1;
nodes("a", "f")@1;
nodes("b", "f")@1;
nodes("c", "f")@1;
nodes("d", "f")@1;
nodes("e", "f")@1;
nodes("f", "f")@1;
nodes("e", "a")@1;
nodes("e", "b")@1;
nodes("e", "c")@1;
nodes("e", "d")@1;
nodes("f", "a")@1;
nodes("f", "b")@1;
nodes("f", "c")@1;
nodes("f", "d")@1;


//This works both for any non-equal "a" "b" "c" and "d" as long as a<b<c
id("a", "a", 10)@1;
id("b", "b", 20)@1;
id("a", "b", 20)@1;
id("b", "a", 10)@1;
id("c", "a", 10)@1;
id("c", "b", 20)@1;
id("c", "c", 30)@1;
id("a", "c", 30)@1;
id("b", "c", 30)@1;
id("a", "d", 35)@1;
id("b", "d", 35)@1;
id("c", "d", 35)@1;
id("d", "d", 35)@1;
id("d", "a", 10)@1;
id("d", "b", 20)@1;
id("d", "c", 30)@1;
id("a", "e", 15)@1;
id("a", "f", 25)@1;
id("b", "e", 15)@1;
id("b", "f", 25)@1;
id("c", "e", 15)@1;
id("c", "f", 25)@1;
id("d", "e", 15)@1;
id("d", "f", 25)@1;
id("e", "a", 10)@1;
id("e", "b", 20)@1;
id("e", "c", 30)@1;
id("e", "d", 35)@1;
id("e", "e", 15)@1;
id("e", "f", 25)@1;
id("f", "a", 10)@1;
id("f", "b", 20)@1;
id("f", "c", 30)@1;
id("f", "d", 35)@1;
id("f", "e", 15)@1;
id("f", "f", 25)@1;

pred("a", "a", "d")@1;
pred("b", "a", "d")@1;
pred("c", "a", "d")@1;
pred("a", "b", "e")@1;
pred("b", "b", "e")@1;
pred("c", "b", "e")@1;
pred("a", "c", "f")@1;
pred("b", "c", "f")@1;
pred("c", "c", "f")@1;
pred("d", "a", "d")@1;
pred("d", "b", "e")@1;
pred("d", "c", "f")@1;
pred("d", "d", "c")@1;
pred("a", "d", "c")@1;
pred("b", "d", "c")@1;
pred("c", "d", "c")@1;
pred("f", "f", "b")@1;
pred("e", "e", "a")@1;
pred("b", "f", "b")@1;
pred("c", "f", "b")@1;
pred("a", "e", "a")@1;
pred("b", "e", "a")@1;

p_suc("a", "a", "e")@1;
p_suc("b", "a", "e")@1;
p_suc("c", "a", "e")@1;
p_suc("a", "b", "f")@1;
p_suc("b", "b", "f")@1;
p_suc("c", "b", "f")@1;
p_suc("a", "c", "d")@1;
p_suc("b", "c", "d")@1;
p_suc("c", "c", "d")@1;
p_suc("d", "a", "e")@1;
p_suc("d", "b", "f")@1;
p_suc("d", "c", "d")@1;
p_suc("d", "d", "a")@1;
p_suc("a", "d", "a")@1;
p_suc("b", "d", "a")@1;
p_suc("c", "d", "a")@1;
p_suc("e", "e", "b")@1;
p_suc("b", "e", "b")@1;
p_suc("a", "e", "b")@1;
p_suc("f", "f", "c")@1;
p_suc("c", "f", "c")@1;
p_suc("b", "f", "c")@1;

s_suc("a", "a", "c")@1;
s_suc("b", "a", "c")@1;
s_suc("c", "a", "c")@1;
s_suc("a", "b", "a")@1;
s_suc("b", "b", "a")@1;
s_suc("c", "b", "a")@1;
s_suc("a", "c", "b")@1;
s_suc("b", "c", "b")@1;
s_suc("c", "c", "b")@1;

ringjoint("d", "a")@1;
/*s_suc("d", "a", "c")@1;
s_suc("d", "b", "d")@1;
s_suc("d", "c", "a")@1;
s_suc("d", "d", "b")@1;
s_suc("a", "d", "b")@1;
s_suc("b", "d", "b")@1;
s_suc("c", "d", "b")@1;*/


//persistence
nodes(B, A)@next :- nodes(B, A), notin manualcrash(B), notin manualcrash(A);
id(A, B, C)@next :- id(A, B, C), notin manualcrash(A), notin manualcrash(B);
pred(A, B, C)@next :- pred(A, B, C), notin oldpred(_, B, C), notin manualcrash(A), notin manualcrash(B);
p_suc(A, B, C)@next :- p_suc(A, B, C), notin oldpsuc(_, B, C), notin manualcrash(A), notin manualcrash(B);
s_suc(A, B, C)@next :- s_suc(A, B, C), notin oldssuc(_, B, C), notin manualcrash(A), notin manualcrash(B);
crashes(A, B)@next :- crashes(A, B), notin manualcrash(A);
ringjoint(A, Asuc) :- p_suc(A, A, Asuc), id(A, A, Aid), id(A, Asuc, Asucid), Aid >= Asucid;

//runtime
//newnode("d", "a", 35)@1;
//newnode("e", "b", 15)@1;
//newnode("f", "c", 25)@1;
//stab("a")@5;
//stab("b")@5;
//stab("c")@5;
//manualcrash("d")@1;
//manualcrash("e")@1;
//manualcrash("f")@8;
flush("a")@2;
flush("b")@2;
flush("c")@2;
update("a")@3;
update("b")@3;
update("c")@3;

//manualcrash(A)@Time :- crash(A, A, Time);

nodes(New, Joinpoint)@next :- newnode(New, Joinpoint, Newid);
nodes(Joinpoint, New)@async :- newnode(New, Joinpoint, Newid);
id(New, New, Newid)@next :- newnode(New, Joinpoint, Newid);
id(Joinpoint, New, Newid)@async :- newnode(New, Joinpoint, Newid);
giveid(Joinpoint, New)@async :- newnode(New, Joinpoint, Newid);
id(New, Joinpoint, Joinpointid)@async :- giveid(Joinpoint, New), id(Joinpoint, Joinpoint, Joinpointid);
givepred(Joinpoint, New)@async :- newnode(New, Joinpoint, Newid);
givepredinfo(New, Joinpoint, Joinpointpred, Joinpointpredid)@async :- givepred(Joinpoint, New), pred(Joinpoint, Joinpoint, Joinpointpred), id(Joinpoint, Joinpointpred, Joinpointpredid);
pred(New, Joinpoint, Pred) :- givepredinfo(New, Joinpoint, Pred, Predid);
id(Pred, New, Newid)@async :- givepredinfo(New, Joinpoint, Pred, Predid), id(New, New, Newid);
nodes(New, Pred) :- givepredinfo(New, Joinpoint, Pred, Predid);
nodes(Pred, New)@async :- givepredinfo(New, Joinpoint, Pred, Predid);
id(New, Pred, Predid) :- givepredinfo(New, Joinpoint, Pred, Predid);


jointimeout(New, Joinpoint, 1)@next :- newnode(New, Joinpoint, Newid);
jointimeout(New, Joinpoint, Time - 1)@next :- jointimeout(New, Joinpoint, Time), Time > 0;
join(New, Joinpoint)@next :- jointimeout(New, Joinpoint, Time), Time == 0;

crashes(A, C)@async :- manualcrash(C), nodes(C, A);

oldpred(D, D, Dpred)@next :- flush(D), pred(D, D, Dpred), crash(D, Dpred, _);


replpsuc(B, Bssuc, Bpsuc)@next :- update(B), p_suc(B, B, Bpsuc), crash(B, Bpsuc, _), s_suc(B, B, Bssuc), notin crash(B, Bssuc, _);





//joining! (B joins at A and declares A its primary successor).
newpsuc(B, A) :- join(B, A), id(B, B, Bid), id(B, A, Aid), Bid > Aid, pred(B, A, Apred), id(B, Apred, Apredid), Apredid >= Aid, Bid > Apredid;

newpsuc(B, A) :- join(B, A), id(B, B, Bid), id(B, A, Aid), Bid < Aid, pred(B, A, Apred), id(B, Apred, Apredid), Apredid >= Aid;
newpsuc(B, A) :- join(B, A), id(B, B, Bid), id(B, A, Aid), Bid < Aid, pred(B, A, Apred), id(B, Apred, Apredid), Bid > Apredid;
p_suc(C, B, A) :- newpsuc(B, A), nodes(B, C);
//notifying! (B notifies A that B made A its primary successor).
notify(A, B)@async :- newpsuc(B, A);
//nodes(A, B) :- notify(A, B);
replpred(A, B, Apred) :- notify(A, B), id(A, A, Aid), id(A, B, Bid), pred(A, A, Apred), id(A, Apred, Apredid), Bid > Apredid;
replpred(A, B, Apred) :- notify(A, B), id(A, A, Aid), id(A, B, Bid), pred(A, A, Apred), id(A, Apred, Apredid), Bid < Apredid, Apredid >= Aid;

oldpred(A, A, Oldpred) :- replpred(A, Newpred, Oldpred);
pred(B, A, Newpred) :- replpred(A, Newpred, Oldpred), nodes(A, B);
//stabilizing! (A will ask its p_successor(itself :P) for its predecessor. If the predecessor
//is higher in value than A, A will adopt that predecessor as its replacement p_successor.
replpsuc(A, Apsucpred, Apsuc) :- stab(A), p_suc(A, A, Apsuc), pred(A, Apsuc, Apsucpred), id(A, A, Aid), id(A, Apsucpred, Apsucpredid), Aid < Apsucpredid;
oldpsuc(Newpsuc, A, Oldpsuc) :- replpsuc(A, Newpsuc, Oldpsuc);
newpsuc(A, Newpsuc) :- replpsuc(A, Newpsuc, Oldpsuc);

replpsuc(A, Apsucpred, Apsuc) :- stab(A), p_suc(A, A, Apsuc), pred(A, Apsuc, Apsucpred), id(A, A, Aid), id(A, Apsucpred, Apsucpredid), Apsucpredid < Aid, id(A, Apsuc, Apsucid), Aid >= Apsucid;


//A notifies B that A made B its p_successor
newpred(B, A) :- notify(B, A), notin pred(_, B, _);
pred(C, B, A)@async :- newpred(B, A), nodes(B, C);
//reconcile!! (a node adopts its p_successor's p_successor as its s_successor)
replssuc(A, Apsucpsuc, Assuc) :- reconcile(A), p_suc(A, A, Apsuc), p_suc(A, Apsuc, Apsucpsuc), s_suc(A, A, Assuc), Apsucpsuc != Assuc, notin crashes(A, Apsuc);

oldssuc(A, A, Oldssuc) :- replssuc(A, Newssuc, Oldssuc);
s_suc(B, A, Newssuc)@async :- replssuc(A, Newssuc, Oldssuc), nodes(A, B);

s_suc(B, A, Apsucpsuc)@async :- reconcile(A), notin s_suc(_, A, _), p_suc(A, A, Apsuc), p_suc(A, Apsuc, Apsucpsuc), nodes(A, B);

/* Successful run: 

sbt "run-main edu.berkeley.cs.boom.molly.SyncFTChecker \
        src/test/resources/examples_ft/chord/saya_chord_three_node_addition.ded \
        src/test/resources/examples_ft/chord/deliv_assert.ded \
        --EOT 12 \
        --EFF 0 \
        --nodes a,b,c,d,e,f \
        --crashes 0 \
        --prov-diagrams"
*/
